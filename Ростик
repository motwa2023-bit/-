# main.py
import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
if not TOKEN or not ADMIN_ID:
    raise SystemExit("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

ADMIN_ID = int(ADMIN_ID)

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

links_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—à —Å–∞–π—Ç üåê", url="https://example.com")],
    [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª üì¢", url="https://t.me/example")],
])

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏–Ω–∏–º–∞—é –ø–æ—Å—Ç—ã –∏ –º–æ–≥—É —Å–∫–∏–Ω—É—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ø–æ—Å—Ç ‚Äî —è –ø–µ—Ä–µ—à–ª—é –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
        reply_markup=links_kb
    )

@dp.message()
async def handle_message(message: types.Message):
    text = (message.text or "").lower()
    if "–ø—Ä–∏–≤–µ—Ç" in text:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üëã")
        return
    if "–ø–æ–º–æ—â—å" in text:
        await message.answer("–û–ø–∏—à–∏, –≤ —á—ë–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π üì©")
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞)
    try:
        await bot.forward_message(chat_id=ADMIN_ID, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ")
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º –≤–∏–¥–µ.")
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id}:\n{e}\n\n–¢–µ–∫—Å—Ç: {message.text}")

# –ù–µ–±–æ–ª—å—à–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã —Ö–æ—Å—Ç–∏–Ω–≥–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞, –±—ã–ª–∏ –¥–æ–≤–æ–ª—å–Ω—ã
async def start_webserver():
    async def health(request):
        return web.Response(text="ok")
    app = web.Application()
    app.router.add_get("/", health)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"Webserver started on port {port}")

async def main():
    await start_webserver()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
